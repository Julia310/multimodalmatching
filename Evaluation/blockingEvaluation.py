import logging
from Util.trueMatches import get_true_matches


def reduction_ratio(num_comparisons, all_comparisons):
    """Compute the reduction ratio using the given confusion matrix.

     Reduction ratio is calculated as 1 - num_comparison / (TP + FP + FN+ TN).

     Parameter Description:
       num_comparisons : The number of candidate record pairs
       all_comparisons : The total number of comparisons between all record
                         pairs

     The method returns a float value.
  """

    if num_comparisons == 0:
        return 1.0

    rr = 1.0 - float(num_comparisons) / all_comparisons

    return rr


# -----------------------------------------------------------------------------

def pairs_completeness(cand_rec_id_pair_list, true_match_set):
    """Pairs completeness measures the effectiveness of a blocking technique in
     the record linkage process.

     Pairs completeness is calculated as the number of true classified_matches included in
     the candidate record pairs divided by the number of all true classified_matches.

     Parameter Description:
       cand_rec_id_pair_list : Dictionary of candidate record pairs generated
                               by a blocking technique
       true_match_set        : Set of true classified_matches (record identifier pairs)

     The method returns a float value.
  """

    true_matches = 0
    for pair in cand_rec_id_pair_list:
        if [pair[0], pair[1]] in true_match_set:
            true_matches += 1
    pc = float(true_matches) / len(true_match_set)  # Replace with your code

    return pc


# -----------------------------------------------------------------------------

def pairs_quality(cand_rec_id_pair_list, true_match_set):
    """Pairs quality measures the efficiency of a blocking technique.

     Pairs quality is calculated as the number of true classified_matches included in the
     candidate record pairs divided by the number of candidate record pairs
     generated by blocking.

     Parameter Description:
       cand_rec_id_pair_list : Dictionary of candidate record pairs generated
                               by a blocking technique
       true_match_set        : Set of true classified_matches (record identifier pairs)

     The method returns a float value.
  """

    true_matches = 0
    for pair in cand_rec_id_pair_list:
        if [pair[0], pair[1]] in true_match_set:
            true_matches += 1
    pq = float(true_matches) / len(cand_rec_id_pair_list)  # Replace with your code

    return pq


def blocking_evaluation(m_utilites):
    cand_rec_pairs = m_utilites.get_potential_matches_as_flat_list()
    all_comparisons = m_utilites.get_number_of_matching_candidates_before_blocking()
    num_comparisons = len(cand_rec_pairs)
    true_matches = get_true_matches()

    logging.info('Blocking evaluation:')
    logging.info('  Reduction ratio:    %.4f' % (reduction_ratio(num_comparisons, all_comparisons)))
    logging.info('  Pairs completeness: %.4f' % (pairs_completeness(cand_rec_pairs, true_matches)))
    logging.info('  Pairs quality:      %.4f' % (pairs_quality(cand_rec_pairs, true_matches)))
    logging.info('')


